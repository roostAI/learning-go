// Test generated by RoostGPT for test go-unit-algo-string using AI Type Open AI and AI Model gpt-4

package LevenshteinDistance

import (
	"testing"
)

func TestLevenshteinDistance_c58c51e350(t *testing.T) {
	t.Run("Test with same strings", func(t *testing.T) {
		a := "test"
		b := "test"
		got := levenshteinDistance(a, b)
		want := 0
		if got != want {
			t.Errorf("levenshteinDistance(%q, %q) = %v, want %v", a, b, got, want)
		} else {
			t.Logf("Success: levenshteinDistance(%q, %q) = %v", a, b, got)
		}
	})

	t.Run("Test with different strings", func(t *testing.T) {
		a := "test"
		b := "text"
		got := levenshteinDistance(a, b)
		want := 1
		if got != want {
			t.Errorf("levenshteinDistance(%q, %q) = %v, want %v", a, b, got, want)
		} else {
			t.Logf("Success: levenshteinDistance(%q, %q) = %v", a, b, got)
		}
	})

	t.Run("Test with one empty string", func(t *testing.T) {
		a := ""
		b := "test"
		got := levenshteinDistance(a, b)
		want := len(b)
		if got != want {
			t.Errorf("levenshteinDistance(%q, %q) = %v, want %v", a, b, got, want)
		} else {
			t.Logf("Success: levenshteinDistance(%q, %q) = %v", a, b, got)
		}
	})

	t.Run("Test with two empty strings", func(t *testing.T) {
		a := ""
		b := ""
		got := levenshteinDistance(a, b)
		want := 0
		if got != want {
			t.Errorf("levenshteinDistance(%q, %q) = %v, want %v", a, b, got, want)
		} else {
			t.Logf("Success: levenshteinDistance(%q, %q) = %v", a, b, got)
		}
	})
}
