// Test generated by RoostGPT for test go-unit-algo-string using AI Type Open AI and AI Model gpt-4

package LevenshteinDistance

import (
	"testing"
)

// Function to find minimum of three numbers
func min(x, y, z uint16) uint16 {
	if x < y {
		if x < z {
			return x
		} else {
			return z
		}
	} else {
		if y < z {
			return y
		} else {
			return z
		}
	}
}

func levenshteinDistance(a, b string) int {
	// If a string is empty return the length of the second one
	if len(a) == 0 {
		return len(b)
	}

	if len(b) == 0 {
		return len(a)
	}

	// If the strings are the same return 0
	if a == b {
		return 0
	}

	// Swap longer string to b to save some memory O(min(a,b)) instead of O(a)
	if len(a) > len(b) {
		a, b = b, a
	}

	lenS1 := len(a)
	lenS2 := len(b)

	// Declare the array
	x := make([]uint16, lenS1+1)

	// Fill array
	for i := 1; i < len(x); i++ {
		x[i] = uint16(i)
	}

	// Use formula to fill in the rest of the row
	for i := 1; i <= lenS2; i++ {
		prev := uint16(i)
		var current uint16
		for j := 1; j <= lenS1; j++ {
			if b[i-1] == a[j-1] {
				current = x[j-1]
			} else {
				current = min(min(x[j-1]+1, prev+1), x[j]+1)
			}
			x[j-1] = prev
			prev = current
		}
		x[lenS1] = prev
	}

	return int(x[lenS1])
}

func TestLevenshteinDistance_c58c51e350(t *testing.T) {
	// Test case 1: Strings are the same
	distance := levenshteinDistance("test", "test")
	if distance != 0 {
		t.Error("Expected 0, got ", distance)
	} else {
		t.Log("TestLevenshteinDistance_c58c51e350 passed for same strings")
	}

	// Test case 2: One string is empty
	distance = levenshteinDistance("test", "")
	if distance != 4 {
		t.Error("Expected 4, got ", distance)
	} else {
		t.Log("TestLevenshteinDistance_c58c51e350 passed for one empty string")
	}

	// Test case 3: Strings are different
	distance = levenshteinDistance("test", "tent")
	if distance != 1 {
		t.Error("Expected 1, got ", distance)
	} else {
		t.Log("TestLevenshteinDistance_c58c51e350 passed for different strings")
	}

	// Test case 4: Both strings are empty
	distance = levenshteinDistance("", "")
	if distance != 0 {
		t.Error("Expected 0, got ", distance)
	} else {
		t.Log("TestLevenshteinDistance_c58c51e350 passed for both empty strings")
	}
}
