// Test generated by RoostGPT for test go-unit-algo-string using AI Type Open AI and AI Model gpt-4

package LevenshteinDistance

import (
	"testing"
)

func TestLevenshteinDistance_c58c51e350(t *testing.T) {
	// Test with same strings
	result := levenshteinDistance("test", "test")
	if result != 0 {
		t.Error("Expected 0, got ", result)
		t.Log("Failed! Arguments were: 'test', 'test'")
	} else {
		t.Log("Success! Levenshtein Distance of same strings is 0")
	}

	// Test with completely different strings
	result = levenshteinDistance("test", "abcd")
	if result != 4 {
		t.Error("Expected 4, got ", result)
		t.Log("Failed! Arguments were: 'test', 'abcd'")
	} else {
		t.Log("Success! Levenshtein Distance of 'test' and 'abcd' is 4")
	}

	// Test with one string empty
	result = levenshteinDistance("test", "")
	if result != 4 {
		t.Error("Expected 4, got ", result)
		t.Log("Failed! Arguments were: 'test', ''")
	} else {
		t.Log("Success! Levenshtein Distance of 'test' and '' is 4")
	}

	// Test with both strings empty
	result = levenshteinDistance("", "")
	if result != 0 {
		t.Error("Expected 0, got ", result)
		t.Log("Failed! Arguments were: '', ''")
	} else {
		t.Log("Success! Levenshtein Distance of '' and '' is 0")
	}

	// Test with one character different
	result = levenshteinDistance("test", "tost")
	if result != 1 {
		t.Error("Expected 1, got ", result)
		t.Log("Failed! Arguments were: 'test', 'tost'")
	} else {
		t.Log("Success! Levenshtein Distance of 'test' and 'tost' is 1")
	}
}
