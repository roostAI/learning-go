// Test generated by RoostGPT for test go-unit-algo-string using AI Type Open AI and AI Model gpt-4

package EuclideanAlgorithm

import (
	"testing"
)

func TestGCD_ab1c91475d(t *testing.T) {
	t.Run("test1: positive numbers", func(t *testing.T) {
		a, b := 48, 18
		expected := 6
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})

	t.Run("test2: a is multiple of b", func(t *testing.T) {
		a, b := 100, 10
		expected := 10
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})

	t.Run("test3: a and b are primes", func(t *testing.T) {
		a, b := 13, 17
		expected := 1
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})

	t.Run("test4: a is zero", func(t *testing.T) {
		a, b := 0, 5
		expected := 5
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})

	t.Run("test5: both a and b are zero", func(t *testing.T) {
		a, b := 0, 0
		expected := 0
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})

	t.Run("test6: b is zero", func(t *testing.T) {
		a, b := 7, 0
		expected := 7
		got := GCD(a, b)
		if got != expected {
			t.Errorf("GCD(%d, %d) = %d; want %d", a, b, got, expected)
		} else {
			t.Logf("Success: GCD(%d, %d) = %d", a, b, got)
		}
	})
}
