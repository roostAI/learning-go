/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Test Case: Standard Scenario
    - Input: GCD(18,9)
    - Expected Output: 9
    - Description: Test with two common numbers where one is a multiple of the other.

2. Test Case: Identical Numbers
    - Input: GCD(6,6)
    - Expected Output: 6
    - Description: Test with two identical numbers.

3. Test Case: Input is Zero and Non-Zero Number
    - Input: GCD(0,4)
    - Expected Output: 4
    - Description: Test where one number is zero and the other is non-zero.

4. Test Case: Input are both Zero
    - Input: GCD(0,0)
    - Expected Output: 0
    - Description: Test where both numbers are zero.

5. Test Case: Prime Numbers Test
    - Input: GCD(17,19)
    - Expected Output: 1
    - Description: Test where both numbers are prime and should thus return a GCD of 1.

6. Test Case: Large Numbers
    - Input: GCD(1000000,500000)
    - Expected Output: 500000
    - Description: Test with large numbers where one is a multiple of the other.

7. Test Case: Negative Numbers
    - Input: GCD(-20,-10)
    - Expected Output: -10
    - Description: Test with negative numbers.

8. Test Case: Numbers are One and Non-One
    - Input: GCD(1,5)
    - Expected Output: 1
    - Description: One number is 1, the other number is not 1.

9. Test Case: Co-Prime Numbers
    - Input: GCD(9,14)
    - Expected Output: 1
    - Description: Test where the numbers are coprime i.e., they have no common factors other than 1.

10. Test Case: Complex Inputs
    - Input: GCD(48,18)
    - Expected Output: 6
    - Description: More complex scenarios where the numbers have more than one common factor.

*/
package EuclideanAlgorithm

import (
	"testing"
)

func TestGCD_8342e4d49d(t *testing.T) {
	testCases := []struct {
		desc string
		a    int
		b    int
		exp  int
	}{
		{
			desc: "Standard Scenario",
			a:    18,
			b:    9,
			exp:  9,
		},
		{
			desc: "Identical Numbers",
			a:    6,
			b:    6,
			exp:  6,
		},
		{
			desc: "Input is Zero and Non-Zero Number",
			a:    0,
			b:    4,
			exp:  4,
		},
		{
			desc: "Input are both Zero",
			a:    0,
			b:    0,
			exp:  0,
		},
		{
			desc: "Prime Numbers Test",
			a:    17,
			b:    19,
			exp:  1,
		},
		{
			desc: "Large Numbers",
			a:    1000000,
			b:    500000,
			exp:  500000,
		},
		{
			desc: "Negative Numbers",
			a:    -20,
			b:    -10,
			exp:  -10,
		},
		{
			desc: "Numbers are One and Non-One",
			a:    1,
			b:    5,
			exp:  1,
		},
		{
			desc: "Co-Prime Numbers",
			a:    9,
			b:    14,
			exp:  1,
		},
		{
			desc: "Complex Inputs",
			a:    48,
			b:    18,
			exp:  6,
		},
	}

	for _, tC := range testCases {
		t.Run(tC.desc, func(t *testing.T) {
			res := GCD(tC.a, tC.b)
			if res != tC.exp {
				t.Fatalf("GCD(%d, %d): expected %d but got %d", tC.a, tC.b, tC.exp, res)
			}
			t.Logf("Pass: %s", tC.desc)
		})
	}
}
