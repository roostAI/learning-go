/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1: Positive numbers input
Description: Test the function by inputting two positive integers for a and b.
Expectation: The function should return the greatest common divisor (GCD) of the two integers.

Test Scenario 2: Zero input
Description: Test the function by inputting 0 as either a or b.
Expectation: The function should return the other number since anything divided by 0 is undefined and the GCD of a number and 0 is the number itself.

Test Scenario 3: Negative numbers input
Description: Test the function by inputting two negative integers for a and b.
Expectation: The function should return the GCD as a positive integer as the GCD is always a positive number.

Test Scenario 4: Input where a<b
Description: Test the function where the first number 'a' is less than the second number 'b'.
Expectation: The function should operate properly regardless of the positional values of 'a' and 'b' and return the correct GCD.

Test Scenario 5: Input where a>b
Description: Test the function where the first number 'a' is greater than the second number 'b'.
Expectation: The function should operate properly and return the correct GCD, regardless of the positional values of 'a' and 'b'.

Test Scenario 6: Input where a=b
Description: Test the function by inputting the same number as a and b.
Expectation: The function should return that same number as the GCD of a number and itself is the number itself.

Test Scenario 7: Input where a or b is 1
Description: Test the function where one of the numbers is 1.
Expectation: The function should return 1 as the GCD, as for any number, the GCD with 1 is 1.
*/
package EuclideanAlgorithm

import (
	"testing"
)

func TestGCD_8342e4d49d(t *testing.T) {

	testCases := []struct {
		name string
		a, b int
		want int
	}{
		{"Positive numbers input", 60, 48, 12},
		{"Zero input a", 0, 45, 45},
		{"Zero input b", 39, 0, 39},
		{"Negative numbers input", -60, -48, 12},
		{"Input where a<b", 40, 100, 20},
		{"Input where a>b", 144, 60, 12},
		{"Input where a=b", 8, 8, 8},
		{"Input where a or b is 1", 1, 45, 1},
		{"Input where a or b is 1", 27, 1, 1},
	}

	for _, tc := range testCases {
		// since we are testing a non user driven function,
		// no need to use os.Stdout or fmt.Fscanf() for inputs
		// no need to use fmt.Fprintf() for outputs
		got := GCD(tc.a, tc.b)
		if got != tc.want {
			t.Errorf("TestGCD_8342e4d49d() = %v; want %v for input (%v, %v), name: %v", got, tc.want, tc.a, tc.b, tc.name)
		}
		t.Log(tc.name, " executed successfully.")
	}
}
