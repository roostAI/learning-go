/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Test with a positive integer that is a power of two.
   Expect: The function should return `true`.
   Example: `isPowerOfTwo(8)`

2. Scenario: Test with a positive integer that is not a power of two.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(10)`

3. Scenario: Test with a negative integer.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(-2)`

4. Scenario: Test with zero.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(0)`

5. Scenario: Test with one.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(1)`

6. Scenario: Test with large positive integer that is a power of two.
   Expect: The function should return `true`.
   Example: `isPowerOfTwo(1024)`

7. Scenario: Test with large positive integer that is not a power of two.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(1000)`

8. Scenario: Test with a number that is a power of two plus one.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(9)`

9. Scenario: Test with a number that is a power of two minus one.
   Expect: The function should return `false`.
   Example: `isPowerOfTwo(7)`
*/
package IsPowerOfTwo

import (
	"fmt"
	"testing"
)

func TestIsPowerOfTwo_2dd3de6f6a(t *testing.T) {
	tests := []struct {
		input int
		want  bool
	}{
		{8, true},
		{10, false},
		{-2, false},
		{0, false},
		{1, false},
		{1024, true},
		{1000, false},
		{9, false},
		{7, false},
	}

	for _, test := range tests {
		got := isPowerOfTwo(test.input)
		t.Logf("Running test: isPowerOfTwo(%v)", test.input)
		if got != test.want {
			t.Errorf("Test failed for input %v. Got: %v, want: %v", test.input, got, test.want)
			return
		} else {
			t.Logf(fmt.Sprintf("isPowerOfTwo(%v) = %v, want %v", test.input, got, test.want))
		}
	}
}
