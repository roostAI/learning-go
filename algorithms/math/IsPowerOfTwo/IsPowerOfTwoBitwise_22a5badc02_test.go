/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Test Scenario 1: Test with Positive Power of Two Inputs
   - Description: Pass an integer input to `isPowerOfTwoBitwise` where the integer is a positive power of two (e.g., 2, 4, 8, 16, 1024). The function should return `true`.

2. Test Scenario 2: Test with Positive Numbers not Power of Two
   - Description: Pass an integer input to `isPowerOfTwoBitwise` where the integer is a positive number but not a power of two (e.g., 3, 5, 6, 19, 1000). The function should return `false`.

3. Test Scenario 3: Test with Negative Power of Two Inputs
   - Description: Pass an integer input to `isPowerOfTwoBitwise` where the integer is a negative power of two (e.g., -2, -4, -8, -16, -1024). The function should return `false`.

4. Test Scenario 4: Test with Negative Numbers not Power of Two
   - Description: Pass an integer input to `isPowerOfTwoBitwise` where the integer is a negative number and not a power of two (e.g., -3, -5, -6, -19, -789). The function should return `false`.

5. Test Scenario 5: Test with Zero as Input
   - Description: Pass 0 as an input to `isPowerOfTwoBitwise`. The function should return `true` as technically, any number to the power of zero is 1.

6. Test Scenario 6: Test with One as Input
    - Description: Pass 1 as an input to `isPowerOfTwoBitwise`. The function should return `true` as 1 is considered as the power of two of the number zero.

7. Test Scenario 7: Test with Maximum Integer Value
    - Description: Pass the maximum possible integer value as input to `isPowerOfTwoBitwise`. The function should accurately determine if this is a power of two or not.

8. Test Scenario 8: Test with Minimum Integer Value
    - Description: Pass the minimum possible negative integer value as input to `isPowerOfTwoBitwise`. The function should return `false`.

9. Test Scenario 9: Test with Large Number which is a Power of Two
    - Description: Pass a very large number which is a power of two as input to `isPowerOfTwoBitwise` (e.g., 2^30, 2^29). The function should return `true`.

10. Test Scenario 10: Test with Large Number which is not a Power of Two
    - Description: Pass a very large number which is not a power of two as input to `isPowerOfTwoBitwise` (e.g., (2^30) - 1, (2^29) - 1). The function should return `false`.
*/
package IsPowerOfTwo

import (
	"testing"
)

func TestIsPowerOfTwoBitwise_22a5badc02(t *testing.T) {
	// define test cases
	testCases := []struct {
		input  int
		output bool
	}{
		{2, true},
		{4, true},
		{8, true},
		{16, true},
		{1024, true},
		{3, false},
		{5, false},
		{6, false},
		{19, false},
		{1000, false},
		{-2, false},
		{-4, false},
		{-8, false},
		{-16, false},
		{-1024, false},
		{-3, false},
		{-5, false},
		{-6, false},
		{-19, false},
		{-789, false},
		{0, true},
		{1, true},
		{9223372036854775807, false},  // max int value
		{-9223372036854775808, false}, // min int value
		{1073741824, true},            // 2^30
		{536870912, true},             // 2^29
		{1073741823, false},           // (2^30)-1
		{536870911, false},            // (2^29)-1
	}

	for _, testCase := range testCases {

		result := isPowerOfTwoBitwise(testCase.input)

		if result != testCase.output {
			t.Errorf("For %v, expected %v, but got %v", testCase.input, testCase.output, result)
		} else {
			t.Logf("Success: For %v, expected output was matching with function output %v", testCase.input, result)
		}
	}
}
