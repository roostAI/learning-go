/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1: Searching an integer that exists in the list
Description: The target integer exists in the array. The function should return the index of the first occurrence of the target integer in the array.

Test Scenario 2: Searching an integer that does not exist in the list
Description: The target integer does not exist in the array. In this case, the function should return -1.

Test Scenario 3: Searching an integer in an empty list
Description: The array is empty. No matter what the target integer is, the function should return -1 in this case.

Test Scenario 4: Searching an integer in a list where the integer is the first element
Description: The target integer is the first element of the array. The function should return 0 (the index of the first element).

Test Scenario 5: Searching an integer in a list where the integer is the last element
Description: The target integer is the last element of the array. The function should return `len(arr) - 1` (the index of the last element).

Test Scenario 6: Searching an integer in a list containing multiple occurrences of the integer
Description: The target integer exists multiple times in the array. The function should return the index of the first occurrence.

Test Scenario 7: Searching for a negative integer in a list
Description: The array contains one or more negative integers, and the target integer is negative. The function should return the index of the first occurrence of the target integer.

Test Scenario 8: Searching for zero in a list
Description: The array contains zero, and the target integer is zero. The function should return the index of the first occurrence of zero.
*/
package LinearSearch

import (
	"testing"
)

func TestLinearSearch_27843fb92c(t *testing.T) {
	tt := []struct {
		name  string
		arr   []int
		query int
		want  int
	}{
		{
			name:  "Test Scenario 1: Searching an integer that exists in the list",
			arr:   []int{1, 2, 3, 4, 5},
			query: 3,
			want:  2,
		},
		{
			name:  "Test Scenario 2: Searching an integer that does not exist in the list",
			arr:   []int{1, 2, 3, 4, 5},
			query: 6,
			want:  -1,
		},
		{
			name:  "Test Scenario 3: Searching an integer in an empty list",
			arr:   []int{},
			query: 2,
			want:  -1,
		},
		{
			name:  "Test Scenario 4: Searching an integer in a list where the integer is the first element",
			arr:   []int{2, 3, 4, 5},
			query: 2,
			want:  0,
		},
		{
			name:  "Test Scenario 5: Searching an integer in a list where the integer is the last element",
			arr:   []int{1, 2, 3, 4, 5},
			query: 5,
			want:  4,
		},
		{
			name:  "Test Scenario 6: Searching an integer in a list containing multiple occurrences of the integer",
			arr:   []int{1, 2, 3, 4, 5, 3, 7, 3, 9},
			query: 3,
			want:  2,
		},
		{
			name:  "Test Scenario 7: Searching for a negative integer in a list",
			arr:   []int{-1, 2, -3, 4, -5},
			query: -3,
			want:  2,
		},
		{
			name:  "Test Scenario 8: Searching for zero in a list",
			arr:   []int{1, 2, 3, 4, 0},
			query: 0,
			want:  4,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			if got := linearSearch(tc.arr, tc.query); got != tc.want {
				t.Fatalf("linearSearch() = %v, want %v", got, tc.want)
			} else {
				t.Logf("Success: %s\n", tc.name)
			}
		})
	}
}
