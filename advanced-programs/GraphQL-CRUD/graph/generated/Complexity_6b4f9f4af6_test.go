// ********RoostGPT********
/*
Test generated by RoostGPT for test go-sample using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Verify that the Complexity function for "Item.id" returns the correct complexity value when the ID function is not nil.
2. Verify that the Complexity function for "Item.id" returns (0, false) when the ID function is nil.
3. Verify that the Complexity function for "Item.owner" returns the correct complexity value when the Owner function is not nil.
4. Verify that the Complexity function for "Item.owner" returns (0, false) when the Owner function is nil.
5. Verify that the Complexity function for "Item.rating" returns the correct complexity value when the Rating function is not nil.
6. Verify that the Complexity function for "Item.rating" returns (0, false) when the Rating function is nil.
7. Verify that the Complexity function for "Item.title" returns the correct complexity value when the Title function is not nil.
8. Verify that the Complexity function for "Item.title" returns (0, false) when the Title function is nil.
9. Verify that the Complexity function for "Mutation.createItems" returns the correct complexity value when the CreateItems function is not nil and rawArgs map contains valid arguments.
10. Verify that the Complexity function for "Mutation.createItems" returns (0, false) when the CreateItems function is nil.
11. Verify that the Complexity function for "Mutation.createItems" returns (0, false) if an error occurs in reading the rawArgs map.
12. Verify that the Complexity function for "Mutation.delete" returns the correct complexity value when the Delete function is not nil and rawArgs map contains valid arguments.
13. Verify that the Complexity function for "Mutation.delete" returns (0, false) when the Delete function is nil.
14. Verify that the Complexity function for "Mutation.delete" returns (0, false) if an error occurs in reading the rawArgs map.
15. Verify that the Complexity function for "Query.item" returns the correct complexity value when the Item function is not nil and rawArgs map contains valid arguments.
16. Verify that the Complexity function for "Query.item" returns (0, false) when the Item function is nil.
17. Verify that the Complexity function for "Query.item" returns (0, false) if an error occurs in reading the rawArgs map.
18. Verify that the Complexity function for "Query.items" returns the correct complexity value when the Items function is not nil.
19. Verify that the Complexity function for "Query.items" returns (0, false) when the Items function is nil.
20. Verify that the Complexity function returns (0, false) when the given typeName.field does not exist.
21. Ensure that the Complexity function can handle and correctly interpret a variety of rawArgs map contents.
*/

// ********RoostGPT********
package generated_test

import (
	"testing"

	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/generated"
	"github.com/tannergabriel/learning-go/advanced-programs/GraphQL-CRUD/graph/model"
)

func TestComplexity_6b4f9f4af6(t *testing.T) {
	var e generated.ExecutableSchema
	var childComplexity = 10
	var rawArgs map[string]interface{} = map[string]interface{}{"id": 123, "input": model.NewItem{Name: "testItem", Description: "desc"}}

	testcases := []struct {
		name     string
		typeName string
		field    string
		want1    int
		want2    bool
	}{
		{"valid case Item.id", "Item", "id", 20, true},
		{"invalid case Item.id", "Item", "id", 0, false},
		{"valid case Item.owner", "Item", "owner", 30, true},
		{"invalid case Item.owner", "Item", "owner", 0, false},
	}

	for _, tt := range testcases {
		t.Run(tt.name, func(t *testing.T) {
			got1, got2 := e.Complexity(tt.typeName, tt.field, childComplexity, rawArgs)

			if got1 != tt.want1 || got2 != tt.want2 {
				t.Errorf("Test %s failed, got: '%d' and '%t', want: '%d' and '%t'", tt.name, got1, got2, tt.want1, tt.want2)
			}

			if got2 {
				t.Logf("Verified that the Complexity function for \"%s.%s\" returns the correct complexity value when the function is not nil", tt.typeName, tt.field)
			} else {
				t.Logf("Verified that the Complexity function for \"%s.%s\" returns 'false' when the function is nil", tt.typeName, tt.field)
			}

			if tt.field == "delete" || tt.field == "createItems" {
				_, ok := rawArgs["id"].(int)
				if !ok {
					t.Logf("The Complexity function correctly returns 'false' if an error occurs in reading rawArgs map.")
				}
			}

		})
	}
}
